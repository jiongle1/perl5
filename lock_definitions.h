/* -*- mode: C; buffer-read-only: t -*-
 *
 *    lock_definitions.h
 *
 *    Copyright (C) 2023, 2024 by Larry Wall and others
 *
 *    You may distribute under the terms of either the GNU General Public
 *    License or the Artistic License, as specified in the README file.
 *
 * !!!!!!!   DO NOT EDIT THIS FILE   !!!!!!!
 * This file is built by regen/lock_definitions.pl from data in
 * regen/lock_definitions.pl.
 * Any changes made here will be lost!
 */

/* This file contains macros to wrap their respective function calls to ensure
 * that those calls are thread-safe in a multi-threaded environment.
 * 
 * Most libc functions are already thread-safe without these wrappers, so do
 * not appear here.
 *
 * A few calls are considered totally unsuited for use in a multi-thread
 * environment.  These must be called only during single-thread operation:
 *
 * Some functions perform initialization on their first call that must be done
 * while still in a single-thread environment, but subsequent calls are
 * thread-safe when wrapped with the respective macros defined in this file.
 * Therefore, they must be called at least once before switching to
 * multi-threads:
 *
 * The rest of the functions, when wrapped with their respective LOCK and
 * UNLOCK macros, should be thread-safe:
 *
 * Some of these are not thread-safe if called with arguments that don't
 * comply with certain (easily-met) restrictions.  Those are commented where
 * their respective macros are #defined.
 *
 * The macros here do not help in coping with asynchronous signals.  For
 * these, you need to see the vendor man pages.  The functions here known to
 * be vulnerable to signals are:
 *
 *
 * The macros here all should expand to no-ops when run from an unthreaded
 * perl.  Many also expand to no-ops on various other platforms and
 * Configurations.  They exist so you you don't have to worry about this.
 *
 * The macros are designed to not result in deadlock, except deadlock WILL
 * occur if they are used in such a way that a thread tries to acquire a
 * write-lock on a mutex when it already holds a read-lock on that mutex.
 * This could be handled transparently (with significant extra overhead), but
 * applications don't tend to be written in such a way that this issue even
 * comes up.  Best practice is to call the LOCK macro; call the function and
 * copy the result to a per-thread place if that result points to a buffer
 * internal to libc; then UNLOCK it immediately.
 *
 * The macros here are generated from an internal DATA section, populated from
 * information derived from the POSIX 2017 standard and Linux glibc section 3
 * man pages.  (Linux tends to have extra restrictions not in the Standard.)
 * The data can easily be adjusted as necessary.
 *
 * But beware that the Standard contains weasel words that could make
 * multi-thread safety a fiction, depending on the application.  .  Our experience though is
 * that libc implementations don't take advantage of this loophole, and the
 * macros here are written as if it didn't exist.
/(See
 * https://stackoverflow.com/questions/78056645 )* The POSIX standard also says
 *
 *    A thread-safe function can be safely invoked concurrently with other
 *    calls to the same function, or with calls to any other thread-safe
 *    functions, by multiple threads. Each function defined in the System
 *    Interfaces volume of POSIX.1-2017 is thread-safe unless explicitly stated
 *    otherwise. Examples are any 'pure' function, a function which holds a
 *    mutex locked while it is accessing static storage or objects shared
 *    among threads.
 *
 * Note that this doesn't say anything about the behavior of a thread-safe
 * function when executing concurrently with a thread-unsafe function.  This
 * effectively gives permission for a libc implementation to make every
 * allegedly thread-safe function not thread-safe for circumstances outside the
 * control of the thread.  This would wreak havoc on a lot of code if
 * libc implementations took much advantage of this loophole.  But it is a
 * reason to avoid creating many mutexes.  Two threads are always thread-safe
 * if they lock on the same mutex.
 *
 * Another reason to minimize the number of mutexes is that each additional one
 * increases the possibility of deadklock, unless the code is (and remains
 * so during future maintenance) carefully crafted.
 *
 * There are other libc functions that reasonably could have their own mutex.
 * But for the above two reasons, and the expectation that these aren't used
 * all that often, that isn't currently done.  All of them share the locale
 * mutex.  For example, two concurrent threads executing ttyname() can have
 * races.  If benchmarks showed that creating a mutex for just this case sped
 * things up, we'd have to consider that.  Another example is getservent(),
 * setservent(), and endservent() could share their own mutex.  Again that
 * isn't currently done; they are all lumped to using the locale mutex.
 */

/* __fbufsize() has races with other threads concurrently executing any of itself, __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define __FBUFSIZE_LOCK    gwENVr_LOCK_
#define __FBUFSIZE_UNLOCK  gwENVr_UNLOCK_

/* __fpending() has races with other threads concurrently executing any of itself, __fbufsize(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define __FPENDING_LOCK    gwENVr_LOCK_
#define __FPENDING_UNLOCK  gwENVr_UNLOCK_

/* __fpurge() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define __FPURGE_LOCK    gwENVr_LOCK_
#define __FPURGE_UNLOCK  gwENVr_UNLOCK_

/* __fsetlocking() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define __FSETLOCKING_LOCK    gwENVr_LOCK_
#define __FSETLOCKING_UNLOCK  gwENVr_UNLOCK_

/* addmntent() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define ADDMNTENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define ADDMNTENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define ALPHASORT_LOCK    LCr_LOCK_(LC_ALL)
#define ALPHASORT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* asctime() has races with other threads concurrently executing any of itself, or ctime() */
#define ASCTIME_LOCK    gwLCr_LOCK_(LC_ALL)
#define ASCTIME_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define ASCTIME_R_LOCK    LCr_LOCK_(LC_ALL)
#define ASCTIME_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ASPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define ASPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ATOF_LOCK    LCr_LOCK_(LC_ALL)
#define ATOF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ATOI_LOCK    LCr_LOCK_(LC_ALL)
#define ATOI_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ATOL_LOCK    LCr_LOCK_(LC_ALL)
#define ATOL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ATOLL_LOCK    LCr_LOCK_(LC_ALL)
#define ATOLL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define BASENAME_LOCK    gwENVr_LOCK_
#define BASENAME_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define BTOWC_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define BTOWC_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define BTOWC_LOCK    TSE_TOGGLE_(LC_ALL)
#  define BTOWC_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#define CATGETS_LOCK    gwENVr_LOCK_
#define CATGETS_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_MESSAGES
#  define CATOPEN_LOCK    ENVr_LCr_LOCK_(LC_MESSAGES)
#  define CATOPEN_UNLOCK  ENVr_LCr_UNLOCK_(LC_MESSAGES)
#else
#  define CATOPEN_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#  define CATOPEN_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)
#endif

#define CLEARENV_LOCK    ENVw_LOCK_
#define CLEARENV_UNLOCK  ENVw_UNLOCK_

/* clearerr_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define CLEARERR_UNLOCKED_LOCK    gwENVr_LOCK_
#define CLEARERR_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* crypt() has races with other threads concurrently executing any of itself, encrypt(), or setkey() */
#define CRYPT_LOCK    gwENVr_LOCK_
#define CRYPT_UNLOCK  gwENVr_UNLOCK_

#define CRYPT_GENSALT_LOCK    gwENVr_LOCK_
#define CRYPT_GENSALT_UNLOCK  gwENVr_UNLOCK_

/* ctime() has races with other threads concurrently executing any of itself, asctime(), gmtime(), or localtime() */
#define CTIME_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define CTIME_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define CTIME_R_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define CTIME_R_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* cuserid() macros only valid if !string */
#define CUSERID_LOCK    LCr_LOCK_(LC_ALL)
#define CUSERID_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define DBM_CLEARERR_LOCK    gwENVr_LOCK_
#define DBM_CLEARERR_UNLOCK  gwENVr_UNLOCK_

#define DBM_CLOSE_LOCK    gwENVr_LOCK_
#define DBM_CLOSE_UNLOCK  gwENVr_UNLOCK_

#define DBM_DELETE_LOCK    gwENVr_LOCK_
#define DBM_DELETE_UNLOCK  gwENVr_UNLOCK_

#define DBM_ERROR_LOCK    gwENVr_LOCK_
#define DBM_ERROR_UNLOCK  gwENVr_UNLOCK_

#define DBM_FETCH_LOCK    gwENVr_LOCK_
#define DBM_FETCH_UNLOCK  gwENVr_UNLOCK_

#define DBM_FIRSTKEY_LOCK    gwENVr_LOCK_
#define DBM_FIRSTKEY_UNLOCK  gwENVr_UNLOCK_

#define DBM_NEXTKEY_LOCK    gwENVr_LOCK_
#define DBM_NEXTKEY_UNLOCK  gwENVr_UNLOCK_

#define DBM_OPEN_LOCK    gwENVr_LOCK_
#define DBM_OPEN_UNLOCK  gwENVr_UNLOCK_

#define DBM_STORE_LOCK    gwENVr_LOCK_
#define DBM_STORE_UNLOCK  gwENVr_UNLOCK_

#define DIRNAME_LOCK    LCr_LOCK_(LC_ALL)
#define DIRNAME_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define DLERROR_LOCK    gwENVr_LOCK_
#define DLERROR_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_NUMERIC
#  define DPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define DPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define DPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define DPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* drand48() has races with other threads concurrently executing any of itself, erand48(), jrand48(), lcong48(), lrand48(), mrand48(), nrand48(), seed48(), or srand48() */
#define DRAND48_LOCK    gwENVr_LOCK_
#define DRAND48_UNLOCK  gwENVr_UNLOCK_

/* drand48_r() has races with other threads concurrently executing any of itself, erand48_r(), jrand48_r(), lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or srand48_r() */
#define DRAND48_R_LOCK    gwENVr_LOCK_
#define DRAND48_R_UNLOCK  gwENVr_UNLOCK_

#define ECVT_LOCK    gwENVr_LOCK_
#define ECVT_UNLOCK  gwENVr_UNLOCK_

/* encrypt() has races with other threads concurrently executing any of itself, crypt(), or setkey() */
#define ENCRYPT_LOCK    gwENVr_LOCK_
#define ENCRYPT_UNLOCK  gwENVr_UNLOCK_

#define ENDALIASENT_LOCK    LCr_LOCK_(LC_ALL)
#define ENDALIASENT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* endfsent() has races with other threads concurrently executing any of itself, getfsent(), getfsfile(), getfsspec(), or setfsent() */
#define ENDFSENT_LOCK    gwENVr_LOCK_
#define ENDFSENT_UNLOCK  gwENVr_UNLOCK_

/* endgrent() has races with other threads concurrently executing any of itself, getgrent(), getgrent_r(), or setgrent() */
#define ENDGRENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define ENDGRENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* endhostent() has races with other threads concurrently executing any of itself, gethostent(), gethostent_r(), or sethostent() */
#define ENDHOSTENT_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define ENDHOSTENT_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* endnetent() has races with other threads concurrently executing any of itself, getnetent(), or setnetent() */
#define ENDNETENT_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define ENDNETENT_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* endnetgrent() has races with other threads concurrently executing any of itself, getnetgrent(), getnetgrent_r(), innetgr(), or setnetgrent() */
#define ENDNETGRENT_LOCK    gwENVr_LOCK_
#define ENDNETGRENT_UNLOCK  gwENVr_UNLOCK_

/* endprotoent() has races with other threads concurrently executing any of itself, getprotoent(), or setprotoent() */
#define ENDPROTOENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define ENDPROTOENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* endpwent() has races with other threads concurrently executing any of itself, getpwent(), getpwent_r(), or setpwent() */
#define ENDPWENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define ENDPWENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define ENDRPCENT_LOCK    LCr_LOCK_(LC_ALL)
#define ENDRPCENT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* endservent() has races with other threads concurrently executing any of itself, getservent(), or setservent() */
#define ENDSERVENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define ENDSERVENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* endspent() has races with other threads concurrently executing any of itself, getspent(), getspent_r(), or setspent() */
#define ENDSPENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define ENDSPENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* endttyent() has races with other threads concurrently executing any of itself, getttyent(), getttynam(), or setttyent() */
#define ENDTTYENT_LOCK    gwENVr_LOCK_
#define ENDTTYENT_UNLOCK  gwENVr_UNLOCK_

/* endutent() has races with other threads concurrently executing any of itself, endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp() */
#define ENDUTENT_LOCK    gwENVr_LOCK_
#define ENDUTENT_UNLOCK  gwENVr_UNLOCK_

/* endutxent() has races with other threads concurrently executing any of itself, endutent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp() */
#define ENDUTXENT_LOCK    gwENVr_LOCK_
#define ENDUTXENT_UNLOCK  gwENVr_UNLOCK_

/* erand48() has races with other threads concurrently executing any of itself, drand48(), jrand48(), lcong48(), lrand48(), mrand48(), nrand48(), seed48(), or srand48() */
#define ERAND48_LOCK    gwENVr_LOCK_
#define ERAND48_UNLOCK  gwENVr_UNLOCK_

/* erand48_r() has races with other threads concurrently executing any of itself, drand48_r(), jrand48_r(), lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or srand48_r() */
#define ERAND48_R_LOCK    gwENVr_LOCK_
#define ERAND48_R_UNLOCK  gwENVr_UNLOCK_

#define ERR_LOCK    LCr_LOCK_(LC_ALL)
#define ERR_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ERROR_LOCK    LCr_LOCK_(LC_ALL)
#define ERROR_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* error_at_line() macros only valid if error_one_per_line */
#define ERROR_AT_LINE_LOCK    LCr_LOCK_(LC_ALL)
#define ERROR_AT_LINE_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define ERRX_LOCK    LCr_LOCK_(LC_ALL)
#define ERRX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define EXECLP_LOCK    ENVr_LOCK_
#define EXECLP_UNLOCK  ENVr_UNLOCK_

#define EXECVP_LOCK    ENVr_LOCK_
#define EXECVP_UNLOCK  ENVr_UNLOCK_

#define EXECVPE_LOCK    ENVr_LOCK_
#define EXECVPE_UNLOCK  ENVr_UNLOCK_

#define EXIT_LOCK    gwENVr_LOCK_
#define EXIT_UNLOCK  gwENVr_UNLOCK_

#define FCLOSEALL_LOCK    gwENVr_LOCK_
#define FCLOSEALL_UNLOCK  gwENVr_UNLOCK_

#define FCVT_LOCK    gwENVr_LOCK_
#define FCVT_UNLOCK  gwENVr_UNLOCK_

/* fflush_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FFLUSH_UNLOCKED_LOCK    gwENVr_LOCK_
#define FFLUSH_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* fgetc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FGETC_UNLOCKED_LOCK    gwENVr_LOCK_
#define FGETC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#define FGETGRENT_LOCK    gwENVr_LOCK_
#define FGETGRENT_UNLOCK  gwENVr_UNLOCK_

#define FGETPWENT_LOCK    gwENVr_LOCK_
#define FGETPWENT_UNLOCK  gwENVr_UNLOCK_

/* fgets_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FGETS_UNLOCKED_LOCK    gwENVr_LOCK_
#define FGETS_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#define FGETSPENT_LOCK    gwENVr_LOCK_
#define FGETSPENT_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define FGETWC_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define FGETWC_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define FGETWC_LOCK    TSE_TOGGLE_(LC_ALL)
#  define FGETWC_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* fgetwc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FGETWC_UNLOCKED_LOCK    gwENVr_LOCK_
#define FGETWC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define FGETWS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define FGETWS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define FGETWS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define FGETWS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* fgetws_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FGETWS_UNLOCKED_LOCK    gwENVr_LOCK_
#define FGETWS_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#define FNMATCH_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define FNMATCH_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define FORKPTY_LOCK    LCr_LOCK_(LC_ALL)
#define FORKPTY_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define FPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define FPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define FPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define FPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* fputc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FPUTC_UNLOCKED_LOCK    gwENVr_LOCK_
#define FPUTC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* fputs_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FPUTS_UNLOCKED_LOCK    gwENVr_LOCK_
#define FPUTS_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define FPUTWC_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define FPUTWC_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define FPUTWC_LOCK    TSE_TOGGLE_(LC_ALL)
#  define FPUTWC_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* fputwc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FPUTWC_UNLOCKED_LOCK    gwENVr_LOCK_
#define FPUTWC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define FPUTWS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define FPUTWS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define FPUTWS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define FPUTWS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* fputws_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FPUTWS_UNLOCKED_LOCK    gwENVr_LOCK_
#define FPUTWS_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* fread_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FREAD_UNLOCKED_LOCK    gwENVr_LOCK_
#define FREAD_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_NUMERIC
#  define FSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define FSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define FSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define FSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define FTW_LOCK    gwENVr_LOCK_
#define FTW_UNLOCK  gwENVr_UNLOCK_

#define FWPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define FWPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* fwrite_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), getc_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define FWRITE_UNLOCKED_LOCK    gwENVr_LOCK_
#define FWRITE_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_NUMERIC
#  define FWSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define FWSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define FWSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define FWSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* gamma() has races with other threads concurrently executing any of itself, gammaf(), gammal(), lgamma(), lgammaf(), or lgammal() */
#define GAMMA_LOCK    gwENVr_LOCK_
#define GAMMA_UNLOCK  gwENVr_UNLOCK_

/* gammaf() has races with other threads concurrently executing any of itself, gamma(), gammal(), lgamma(), lgammaf(), or lgammal() */
#define GAMMAF_LOCK    gwENVr_LOCK_
#define GAMMAF_UNLOCK  gwENVr_UNLOCK_

/* gammal() has races with other threads concurrently executing any of itself, gamma(), gammaf(), lgamma(), lgammaf(), or lgammal() */
#define GAMMAL_LOCK    gwENVr_LOCK_
#define GAMMAL_UNLOCK  gwENVr_UNLOCK_

#define GET_CURRENT_DIR_NAME_LOCK    ENVr_LOCK_
#define GET_CURRENT_DIR_NAME_UNLOCK  ENVr_UNLOCK_

#define GETADDRINFO_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETADDRINFO_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define GETALIASBYNAME_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETALIASBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETALIASENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETALIASENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getwc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define GETC_UNLOCKED_LOCK    gwENVr_LOCK_
#define GETC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* getchar_unlocked() has races with other threads concurrently executing any of itself, or getwchar_unlocked() */
#define GETCHAR_UNLOCKED_LOCK    gwENVr_LOCK_
#define GETCHAR_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* getcontext() has races with other threads concurrently executing any of itself, makecontext(), setcontext(), or swapcontext() */
#define GETCONTEXT_LOCK    gwENVr_LOCK_
#define GETCONTEXT_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_TIME
#  define GETDATE_LOCK    gwENVr_LCr_LOCK_(LC_TIME)
#  define GETDATE_UNLOCK  gwENVr_LCr_UNLOCK_(LC_TIME)
#else
#  define GETDATE_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#  define GETDATE_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_TIME
#  define GETDATE_R_LOCK    ENVr_LCr_LOCK_(LC_TIME)
#  define GETDATE_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_TIME)
#else
#  define GETDATE_R_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#  define GETDATE_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)
#endif

#define GETENV_LOCK    ENVr_LOCK_
#define GETENV_UNLOCK  ENVr_UNLOCK_

/* getfsent() has races with other threads concurrently executing any of itself, endfsent(), getfsfile(), getfsspec(), or setfsent() */
#define GETFSENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETFSENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getfsfile() has races with other threads concurrently executing any of itself, endfsent(), getfsent(), getfsspec(), or setfsent() */
#define GETFSFILE_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETFSFILE_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getfsspec() has races with other threads concurrently executing any of itself, endfsent(), getfsent(), getfsfile(), or setfsent() */
#define GETFSSPEC_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETFSSPEC_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getgrent() has races with other threads concurrently executing any of itself, endgrent(), getgrent_r(), or setgrent() */
#define GETGRENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETGRENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getgrent_r() has races with other threads concurrently executing any of itself, endgrent(), getgrent(), or setgrent() */
#define GETGRENT_R_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETGRENT_R_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETGRGID_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETGRGID_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETGRGID_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETGRGID_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETGRNAM_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETGRNAM_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETGRNAM_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETGRNAM_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETGROUPLIST_LOCK    LCr_LOCK_(LC_ALL)
#define GETGROUPLIST_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETHOSTBYADDR_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTBYADDR_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GETHOSTBYADDR_R_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTBYADDR_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define GETHOSTBYNAME_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTBYNAME_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GETHOSTBYNAME2_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTBYNAME2_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GETHOSTBYNAME2_R_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTBYNAME2_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define GETHOSTBYNAME_R_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTBYNAME_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

/* gethostent() has races with other threads concurrently executing any of itself, endhostent(), gethostent_r(), or sethostent() */
#define GETHOSTENT_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTENT_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* gethostent_r() has races with other threads concurrently executing any of itself, endhostent(), gethostent(), or sethostent() */
#define GETHOSTENT_R_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTENT_R_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GETHOSTID_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETHOSTID_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

/* getlogin() is vulnerable to signal ALRM
 * getlogin() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETLOGIN_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETLOGIN_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getlogin_r() is vulnerable to signal ALRM
 * getlogin_r() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETLOGIN_R_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETLOGIN_R_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETMNTENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETMNTENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETMNTENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETMNTENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETNAMEINFO_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETNAMEINFO_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define GETNETBYADDR_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETNETBYADDR_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETNETBYADDR_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETNETBYADDR_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETNETBYNAME_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETNETBYNAME_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GETNETBYNAME_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETNETBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getnetent() has races with other threads concurrently executing any of itself, endnetent(), or setnetent() */
#define GETNETENT_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GETNETENT_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GETNETENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETNETENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getnetgrent() has races with other threads concurrently executing any of itself, endnetgrent(), getnetgrent_r(), innetgr(), or setnetgrent() */
#define GETNETGRENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETNETGRENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getnetgrent_r() has races with other threads concurrently executing any of itself, endnetgrent(), getnetgrent(), innetgr(), or setnetgrent() */
#define GETNETGRENT_R_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETNETGRENT_R_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getopt() has races with other threads concurrently executing any of itself, getopt_long(), or getopt_long_only() */
#define GETOPT_LOCK    gwENVr_LOCK_
#define GETOPT_UNLOCK  gwENVr_UNLOCK_

/* getopt_long() has races with other threads concurrently executing any of itself, getopt(), or getopt_long_only() */
#define GETOPT_LONG_LOCK    gwENVr_LOCK_
#define GETOPT_LONG_UNLOCK  gwENVr_UNLOCK_

/* getopt_long_only() has races with other threads concurrently executing any of itself, getopt(), or getopt_long() */
#define GETOPT_LONG_ONLY_LOCK    gwENVr_LOCK_
#define GETOPT_LONG_ONLY_UNLOCK  gwENVr_UNLOCK_

#define GETPASS_LOCK    ENVw_LOCK_
#define GETPASS_UNLOCK  ENVw_UNLOCK_

#define GETPROTOBYNAME_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPROTOBYNAME_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETPROTOBYNAME_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETPROTOBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETPROTOBYNUMBER_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPROTOBYNUMBER_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETPROTOBYNUMBER_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETPROTOBYNUMBER_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getprotoent() has races with other threads concurrently executing any of itself, endprotoent(), or setprotoent() */
#define GETPROTOENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPROTOENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETPROTOENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETPROTOENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETPW_LOCK    LCr_LOCK_(LC_ALL)
#define GETPW_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getpwent() has races with other threads concurrently executing any of itself, endpwent(), getpwent_r(), or setpwent() */
#define GETPWENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPWENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getpwent_r() has races with other threads concurrently executing any of itself, endpwent(), getpwent(), or setpwent() */
#define GETPWENT_R_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPWENT_R_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETPWNAM_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPWNAM_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETPWNAM_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETPWNAM_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETPWUID_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETPWUID_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETPWUID_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETPWUID_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETRPCBYNAME_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETRPCBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETRPCBYNUMBER_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETRPCBYNUMBER_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETRPCENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETRPCENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETRPCPORT_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GETRPCPORT_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define GETSERVBYNAME_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETSERVBYNAME_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETSERVBYNAME_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETSERVBYNAME_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define GETSERVBYPORT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETSERVBYPORT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETSERVBYPORT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETSERVBYPORT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getservent() has races with other threads concurrently executing any of itself, endservent(), or setservent() */
#define GETSERVENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETSERVENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETSERVENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETSERVENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getspent() has races with other threads concurrently executing any of itself, endspent(), getspent_r(), or setspent() */
#define GETSPENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETSPENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* getspent_r() has races with other threads concurrently executing any of itself, endspent(), getspent(), or setspent() */
#define GETSPENT_R_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETSPENT_R_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETSPNAM_LOCK    gwLCr_LOCK_(LC_ALL)
#define GETSPNAM_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define GETSPNAM_R_LOCK    LCr_LOCK_(LC_ALL)
#define GETSPNAM_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* getttyent() has races with other threads concurrently executing any of itself, endttyent(), getttynam(), or setttyent() */
#define GETTTYENT_LOCK    gwENVr_LOCK_
#define GETTTYENT_UNLOCK  gwENVr_UNLOCK_

/* getttynam() has races with other threads concurrently executing any of itself, endttyent(), getttyent(), or setttyent() */
#define GETTTYNAM_LOCK    gwENVr_LOCK_
#define GETTTYNAM_UNLOCK  gwENVr_UNLOCK_

/* getutent() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 * getutent() is vulnerable to signal ALRM
 * getutent() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETUTENT_LOCK    gwENVr_LOCK_
#define GETUTENT_UNLOCK  gwENVr_UNLOCK_

/* getutid() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 * getutid() is vulnerable to signal ALRM
 * getutid() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETUTID_LOCK    gwENVr_LOCK_
#define GETUTID_UNLOCK  gwENVr_UNLOCK_

/* getutline() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 * getutline() is vulnerable to signal ALRM
 * getutline() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETUTLINE_LOCK    gwENVr_LOCK_
#define GETUTLINE_UNLOCK  gwENVr_UNLOCK_

/* getutxent() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 * getutxent() is vulnerable to signal ALRM
 * getutxent() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETUTXENT_LOCK    gwENVr_LOCK_
#define GETUTXENT_UNLOCK  gwENVr_UNLOCK_

/* getutxid() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 * getutxid() is vulnerable to signal ALRM
 * getutxid() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define GETUTXID_LOCK    gwENVr_LOCK_
#define GETUTXID_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define GETWC_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define GETWC_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define GETWC_LOCK    TSE_TOGGLE_(LC_ALL)
#  define GETWC_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* getwc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), putc_unlocked(), or putwc_unlocked() */
#define GETWC_UNLOCKED_LOCK    gwENVr_LOCK_
#define GETWC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define GETWCHAR_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define GETWCHAR_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define GETWCHAR_LOCK    TSE_TOGGLE_(LC_ALL)
#  define GETWCHAR_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* getwchar_unlocked() has races with other threads concurrently executing any of itself, or getchar_unlocked() */
#define GETWCHAR_UNLOCKED_LOCK    gwENVr_LOCK_
#define GETWCHAR_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* glob() is vulnerable to signal ALRM
 * glob() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#ifdef LC_COLLATE
#  define GLOB_LOCK    gwENVr_LCr_LOCK_(LC_COLLATE)
#  define GLOB_UNLOCK  gwENVr_LCr_UNLOCK_(LC_COLLATE)
#else
#  define GLOB_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#  define GLOB_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)
#endif

/* gmtime() has races with other threads concurrently executing any of itself, ctime(), or localtime() */
#define GMTIME_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define GMTIME_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define GMTIME_R_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define GMTIME_R_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define GRANTPT_LOCK    LCr_LOCK_(LC_ALL)
#define GRANTPT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* hcreate() has races with other threads concurrently executing any of itself, hdestroy(), or hsearch() */
#define HCREATE_LOCK    gwENVr_LOCK_
#define HCREATE_UNLOCK  gwENVr_UNLOCK_

/* hcreate_r() has races with other threads concurrently executing any of itself, hdestroy_r(), or hsearch_r() */
#define HCREATE_R_LOCK    gwENVr_LOCK_
#define HCREATE_R_UNLOCK  gwENVr_UNLOCK_

/* hdestroy() has races with other threads concurrently executing any of itself, hcreate(), or hsearch() */
#define HDESTROY_LOCK    gwENVr_LOCK_
#define HDESTROY_UNLOCK  gwENVr_UNLOCK_

/* hdestroy_r() has races with other threads concurrently executing any of itself, hcreate_r(), or hsearch_r() */
#define HDESTROY_R_LOCK    gwENVr_LOCK_
#define HDESTROY_R_UNLOCK  gwENVr_UNLOCK_

/* hsearch() has races with other threads concurrently executing any of itself, hcreate(), or hdestroy() */
#define HSEARCH_LOCK    gwENVr_LOCK_
#define HSEARCH_UNLOCK  gwENVr_UNLOCK_

/* hsearch_r() has races with other threads concurrently executing any of itself, hcreate_r(), or hdestroy_r() */
#define HSEARCH_R_LOCK    gwENVr_LOCK_
#define HSEARCH_R_UNLOCK  gwENVr_UNLOCK_

#define ICONV_LOCK    gwENVr_LOCK_
#define ICONV_UNLOCK  gwENVr_UNLOCK_

#define ICONV_OPEN_LOCK    LCr_LOCK_(LC_ALL)
#define ICONV_OPEN_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define INET_ADDR_LOCK    LCr_LOCK_(LC_ALL)
#define INET_ADDR_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define INET_ATON_LOCK    LCr_LOCK_(LC_ALL)
#define INET_ATON_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define INET_NETWORK_LOCK    LCr_LOCK_(LC_ALL)
#define INET_NETWORK_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define INET_NTOA_LOCK    gwLCr_LOCK_(LC_ALL)
#define INET_NTOA_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define INET_NTOP_LOCK    LCr_LOCK_(LC_ALL)
#define INET_NTOP_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define INET_PTON_LOCK    LCr_LOCK_(LC_ALL)
#define INET_PTON_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define INITGROUPS_LOCK    LCr_LOCK_(LC_ALL)
#define INITGROUPS_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* initstate_r() has races with other threads concurrently executing any of itself, random_r(), setstate_r(), or srandom_r() */
#define INITSTATE_R_LOCK    gwENVr_LOCK_
#define INITSTATE_R_UNLOCK  gwENVr_UNLOCK_

/* innetgr() has races with other threads concurrently executing any of itself, endnetgrent(), getnetgrent(), getnetgrent_r(), or setnetgrent() */
#define INNETGR_LOCK    gwLCr_LOCK_(LC_ALL)
#define INNETGR_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define IRUSEROK_LOCK    LCr_LOCK_(LC_ALL)
#define IRUSEROK_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define IRUSEROK_AF_LOCK    LCr_LOCK_(LC_ALL)
#define IRUSEROK_AF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_CTYPE
#  define ISALNUM_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISALNUM_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISALNUM_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISALNUM_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISALNUM_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISALNUM_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISALNUM_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISALNUM_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISALPHA_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISALPHA_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISALPHA_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISALPHA_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISALPHA_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISALPHA_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISALPHA_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISALPHA_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISASCII_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISASCII_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISASCII_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISASCII_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISASCII_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISASCII_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISASCII_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISASCII_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISBLANK_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISBLANK_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISBLANK_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISBLANK_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISBLANK_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISBLANK_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISBLANK_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISBLANK_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISCNTRL_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISCNTRL_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISCNTRL_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISCNTRL_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISCNTRL_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISCNTRL_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISCNTRL_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISCNTRL_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISDIGIT_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISDIGIT_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISDIGIT_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISDIGIT_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISDIGIT_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISDIGIT_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISDIGIT_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISDIGIT_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISGRAPH_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISGRAPH_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISGRAPH_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISGRAPH_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISGRAPH_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISGRAPH_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISGRAPH_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISGRAPH_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISLOWER_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISLOWER_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISLOWER_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISLOWER_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISLOWER_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISLOWER_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISLOWER_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISLOWER_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISPRINT_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISPRINT_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISPRINT_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISPRINT_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISPRINT_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISPRINT_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISPRINT_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISPRINT_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISPUNCT_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISPUNCT_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISPUNCT_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISPUNCT_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISPUNCT_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISPUNCT_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISPUNCT_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISPUNCT_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISSPACE_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISSPACE_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISSPACE_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISSPACE_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISSPACE_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISSPACE_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISSPACE_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISSPACE_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISUPPER_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISUPPER_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISUPPER_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISUPPER_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISUPPER_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISUPPER_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISUPPER_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISUPPER_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWALNUM_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWALNUM_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWALNUM_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWALNUM_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWALNUM_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWALNUM_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWALNUM_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWALNUM_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWALPHA_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWALPHA_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWALPHA_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWALPHA_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWALPHA_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWALPHA_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWALPHA_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWALPHA_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWASCII_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWASCII_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWASCII_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWASCII_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWASCII_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWASCII_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWASCII_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWASCII_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWBLANK_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWBLANK_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWBLANK_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWBLANK_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWBLANK_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWBLANK_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWBLANK_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWBLANK_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWCNTRL_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWCNTRL_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWCNTRL_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWCNTRL_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWCNTRL_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWCNTRL_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWCNTRL_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWCNTRL_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWDIGIT_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWDIGIT_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWDIGIT_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWDIGIT_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWDIGIT_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWDIGIT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWDIGIT_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWDIGIT_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWGRAPH_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWGRAPH_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWGRAPH_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWGRAPH_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWGRAPH_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWGRAPH_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWGRAPH_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWGRAPH_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWLOWER_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWLOWER_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWLOWER_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWLOWER_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWLOWER_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWLOWER_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWLOWER_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWLOWER_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWPRINT_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWPRINT_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWPRINT_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWPRINT_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWPRINT_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWPRINT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWPRINT_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWPRINT_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWPUNCT_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWPUNCT_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWPUNCT_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWPUNCT_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWPUNCT_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWPUNCT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWPUNCT_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWPUNCT_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWSPACE_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWSPACE_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWSPACE_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWSPACE_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWSPACE_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWSPACE_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWSPACE_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWSPACE_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWUPPER_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWUPPER_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWUPPER_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWUPPER_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWUPPER_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWUPPER_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWUPPER_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWUPPER_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWXDIGIT_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWXDIGIT_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWXDIGIT_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWXDIGIT_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISWXDIGIT_L_LOCK    LCr_LOCK_(LC_CTYPE)
#  define ISWXDIGIT_L_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define ISWXDIGIT_L_LOCK    LCr_LOCK_(LC_ALL)
#  define ISWXDIGIT_L_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISXDIGIT_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISXDIGIT_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISXDIGIT_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISXDIGIT_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define ISXDIGIT_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define ISXDIGIT_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define ISXDIGIT_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define ISXDIGIT_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* jrand48() has races with other threads concurrently executing any of itself, drand48(), erand48(), lcong48(), lrand48(), mrand48(), nrand48(), seed48(), or srand48() */
#define JRAND48_LOCK    gwENVr_LOCK_
#define JRAND48_UNLOCK  gwENVr_UNLOCK_

/* jrand48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or srand48_r() */
#define JRAND48_R_LOCK    gwENVr_LOCK_
#define JRAND48_R_UNLOCK  gwENVr_UNLOCK_

#define L64A_LOCK    gwENVr_LOCK_
#define L64A_UNLOCK  gwENVr_UNLOCK_

/* lcong48() has races with other threads concurrently executing any of itself, drand48(), erand48(), jrand48(), lrand48(), mrand48(), nrand48(), seed48(), or srand48() */
#define LCONG48_LOCK    gwENVr_LOCK_
#define LCONG48_UNLOCK  gwENVr_UNLOCK_

/* lcong48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), jrand48_r(), lrand48_r(), mrand48_r(), nrand48_r(), seed48_r(), or srand48_r() */
#define LCONG48_R_LOCK    gwENVr_LOCK_
#define LCONG48_R_UNLOCK  gwENVr_UNLOCK_

/* lgamma() has races with other threads concurrently executing any of itself, gamma(), gammaf(), gammal(), lgammaf(), or lgammal() */
#define LGAMMA_LOCK    gwENVr_LOCK_
#define LGAMMA_UNLOCK  gwENVr_UNLOCK_

/* lgammaf() has races with other threads concurrently executing any of itself, gamma(), gammaf(), gammal(), lgamma(), or lgammal() */
#define LGAMMAF_LOCK    gwENVr_LOCK_
#define LGAMMAF_UNLOCK  gwENVr_UNLOCK_

/* lgammal() has races with other threads concurrently executing any of itself, gamma(), gammaf(), gammal(), lgamma(), or lgammaf() */
#define LGAMMAL_LOCK    gwENVr_LOCK_
#define LGAMMAL_UNLOCK  gwENVr_UNLOCK_

#define LOCALECONV_LOCK    gwLCr_LOCK_(LC_ALL)
#define LOCALECONV_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* localtime() has races with other threads concurrently executing any of itself, ctime(), or gmtime() */
#define LOCALTIME_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define LOCALTIME_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define LOCALTIME_R_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define LOCALTIME_R_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* login() is vulnerable to signal ALRM
 * login() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), logout(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define LOGIN_LOCK    gwENVr_LOCK_
#define LOGIN_UNLOCK  gwENVr_UNLOCK_

/* login_tty() has races with other threads concurrently executing any of itself, or ttyname() */
#define LOGIN_TTY_LOCK    gwENVr_LOCK_
#define LOGIN_TTY_UNLOCK  gwENVr_UNLOCK_

/* logout() is vulnerable to signal ALRM
 * logout() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), pututline(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define LOGOUT_LOCK    gwENVr_LOCK_
#define LOGOUT_UNLOCK  gwENVr_UNLOCK_

/* logwtmp() is vulnerable to signal ALRM */

/* lrand48() has races with other threads concurrently executing any of itself, drand48(), erand48(), jrand48(), lcong48(), mrand48(), nrand48(), seed48(), or srand48() */
#define LRAND48_LOCK    gwENVr_LOCK_
#define LRAND48_UNLOCK  gwENVr_UNLOCK_

/* lrand48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(), mrand48_r(), nrand48_r(), seed48_r(), or srand48_r() */
#define LRAND48_R_LOCK    gwENVr_LOCK_
#define LRAND48_R_UNLOCK  gwENVr_UNLOCK_

/* makecontext() has races with other threads concurrently executing any of itself, getcontext(), setcontext(), or swapcontext() */
#define MAKECONTEXT_LOCK    gwENVr_LOCK_
#define MAKECONTEXT_UNLOCK  gwENVr_UNLOCK_

/* mallinfo() is unsuitable for a multi-threaded environment
 * mallinfo() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 */

#ifdef LC_CTYPE
#  define MB_CUR_MAX_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MB_CUR_MAX_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MB_CUR_MAX_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MB_CUR_MAX_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define MBLEN_LOCK    gwENVr_LCr_LOCK_(LC_CTYPE)
#  define MBLEN_UNLOCK  gwENVr_LCr_UNLOCK_(LC_CTYPE)
#else
#  define MBLEN_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#  define MBLEN_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)
#endif

/* mbrlen() macros only valid if !ps */
#ifdef LC_CTYPE
#  define MBRLEN_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MBRLEN_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MBRLEN_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MBRLEN_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* mbrtowc() macros only valid if !ps */
#ifdef LC_CTYPE
#  define MBRTOWC_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MBRTOWC_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MBRTOWC_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MBRTOWC_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define MBSINIT_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MBSINIT_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MBSINIT_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MBSINIT_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* mbsnrtowcs() macros only valid if !ps */
#ifdef LC_CTYPE
#  define MBSNRTOWCS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MBSNRTOWCS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MBSNRTOWCS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MBSNRTOWCS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* mbsrtowcs() macros only valid if !ps */
#ifdef LC_CTYPE
#  define MBSRTOWCS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MBSRTOWCS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MBSRTOWCS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MBSRTOWCS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define MBSTOWCS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define MBSTOWCS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define MBSTOWCS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define MBSTOWCS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define MBTOWC_LOCK    gwENVr_LCr_LOCK_(LC_CTYPE)
#  define MBTOWC_UNLOCK  gwENVr_LCr_UNLOCK_(LC_CTYPE)
#else
#  define MBTOWC_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#  define MBTOWC_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)
#endif

/* mcheck() is unsuitable for a multi-threaded environment
 * mcheck() has races with other threads concurrently executing any of itself, mcheck_check_all(), mcheck_pedantic(), or mprobe()
 */
#define MCHECK_LOCK    gwENVr_LOCK_
#define MCHECK_UNLOCK  gwENVr_UNLOCK_

/* mcheck_check_all() is unsuitable for a multi-threaded environment
 * mcheck_check_all() has races with other threads concurrently executing any of itself, mcheck(), mcheck_pedantic(), or mprobe()
 */
#define MCHECK_CHECK_ALL_LOCK    gwENVr_LOCK_
#define MCHECK_CHECK_ALL_UNLOCK  gwENVr_UNLOCK_

/* mcheck_pedantic() is unsuitable for a multi-threaded environment
 * mcheck_pedantic() has races with other threads concurrently executing any of itself, mcheck(), mcheck_check_all(), or mprobe()
 */
#define MCHECK_PEDANTIC_LOCK    gwENVr_LOCK_
#define MCHECK_PEDANTIC_UNLOCK  gwENVr_UNLOCK_

#define MKTIME_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define MKTIME_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* mprobe() is unsuitable for a multi-threaded environment
 * mprobe() has races with other threads concurrently executing any of itself, mcheck(), mcheck_check_all(), or mcheck_pedantic()
 */
#define MPROBE_LOCK    gwENVr_LOCK_
#define MPROBE_UNLOCK  gwENVr_UNLOCK_

/* mrand48() has races with other threads concurrently executing any of itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(), nrand48(), seed48(), or srand48() */
#define MRAND48_LOCK    gwENVr_LOCK_
#define MRAND48_UNLOCK  gwENVr_UNLOCK_

/* mrand48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(), lrand48_r(), nrand48_r(), seed48_r(), or srand48_r() */
#define MRAND48_R_LOCK    gwENVr_LOCK_
#define MRAND48_R_UNLOCK  gwENVr_UNLOCK_

#define NEWLOCALE_LOCK    ENVr_LOCK_
#define NEWLOCALE_UNLOCK  ENVr_UNLOCK_

#define NFTW_LOCK    ENVw_LOCK_
#define NFTW_UNLOCK  ENVw_UNLOCK_

#define NL_LANGINFO_LOCK    gwLCr_LOCK_(LC_ALL)
#define NL_LANGINFO_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* nrand48() has races with other threads concurrently executing any of itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(), mrand48(), seed48(), or srand48() */
#define NRAND48_LOCK    gwENVr_LOCK_
#define NRAND48_UNLOCK  gwENVr_UNLOCK_

/* nrand48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(), lrand48_r(), mrand48_r(), seed48_r(), or srand48_r() */
#define NRAND48_R_LOCK    gwENVr_LOCK_
#define NRAND48_R_UNLOCK  gwENVr_UNLOCK_

#define OPENPTY_LOCK    LCr_LOCK_(LC_ALL)
#define OPENPTY_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define PERROR_LOCK    gwENVr_LOCK_
#define PERROR_UNLOCK  gwENVr_UNLOCK_

/* posix_fallocate() may be unsafe on some platforms */

#ifdef LC_NUMERIC
#  define PRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define PRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define PRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define PRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define PSIGINFO_LOCK    LCr_LOCK_(LC_ALL)
#define PSIGINFO_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define PSIGNAL_LOCK    LCr_LOCK_(LC_ALL)
#define PSIGNAL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define PTSNAME_LOCK    gwENVr_LOCK_
#define PTSNAME_UNLOCK  gwENVr_UNLOCK_

/* putc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), or putwc_unlocked() */
#define PUTC_UNLOCKED_LOCK    gwENVr_LOCK_
#define PUTC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* putchar_unlocked() has races with other threads concurrently executing any of itself, or putwchar_unlocked() */
#define PUTCHAR_UNLOCKED_LOCK    gwENVr_LOCK_
#define PUTCHAR_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#define PUTENV_LOCK    ENVw_LOCK_
#define PUTENV_UNLOCK  ENVw_UNLOCK_

#define PUTPWENT_LOCK    LCr_LOCK_(LC_ALL)
#define PUTPWENT_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define PUTSPENT_LOCK    LCr_LOCK_(LC_ALL)
#define PUTSPENT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* pututline() is vulnerable to signal ALRM
 * pututline() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututxline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define PUTUTLINE_LOCK    gwENVr_LOCK_
#define PUTUTLINE_UNLOCK  gwENVr_UNLOCK_

/* pututxline() is vulnerable to signal ALRM
 * pututxline() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), setutent(), setutxent(), utmpname(), or wordexp()
 */
#define PUTUTXLINE_LOCK    gwENVr_LOCK_
#define PUTUTXLINE_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define PUTWC_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define PUTWC_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define PUTWC_LOCK    TSE_TOGGLE_(LC_ALL)
#  define PUTWC_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* putwc_unlocked() has races with other threads concurrently executing any of itself, __fbufsize(), __fpending(), __fpurge(), __fsetlocking(), addmntent(), clearerr_unlocked(), fflush_unlocked(), fgetc_unlocked(), fgets_unlocked(), fgetwc_unlocked(), fgetws_unlocked(), fputc_unlocked(), fputs_unlocked(), fputwc_unlocked(), fputws_unlocked(), fread_unlocked(), fwrite_unlocked(), getc_unlocked(), getwc_unlocked(), or putc_unlocked() */
#define PUTWC_UNLOCKED_LOCK    gwENVr_LOCK_
#define PUTWC_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_CTYPE
#  define PUTWCHAR_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define PUTWCHAR_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define PUTWCHAR_LOCK    TSE_TOGGLE_(LC_ALL)
#  define PUTWCHAR_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* putwchar_unlocked() has races with other threads concurrently executing any of itself, or putchar_unlocked() */
#define PUTWCHAR_UNLOCKED_LOCK    gwENVr_LOCK_
#define PUTWCHAR_UNLOCKED_UNLOCK  gwENVr_UNLOCK_

/* pvalloc() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 */

#define QECVT_LOCK    gwENVr_LOCK_
#define QECVT_UNLOCK  gwENVr_UNLOCK_

#define QFCVT_LOCK    gwENVr_LOCK_
#define QFCVT_UNLOCK  gwENVr_UNLOCK_

/* random_r() has races with other threads concurrently executing any of itself, initstate_r(), setstate_r(), or srandom_r() */
#define RANDOM_R_LOCK    gwENVr_LOCK_
#define RANDOM_R_UNLOCK  gwENVr_UNLOCK_

#define READDIR_LOCK    gwENVr_LOCK_
#define READDIR_UNLOCK  gwENVr_UNLOCK_

#define REGCOMP_LOCK    LCr_LOCK_(LC_ALL)
#define REGCOMP_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define REGERROR_LOCK    ENVr_LOCK_
#define REGERROR_UNLOCK  ENVr_UNLOCK_

#define REGEXEC_LOCK    LCr_LOCK_(LC_ALL)
#define REGEXEC_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RES_NCLOSE_LOCK    LCr_LOCK_(LC_ALL)
#define RES_NCLOSE_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RES_NINIT_LOCK    LCr_LOCK_(LC_ALL)
#define RES_NINIT_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RES_NQUERY_LOCK    LCr_LOCK_(LC_ALL)
#define RES_NQUERY_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RES_NQUERYDOMAIN_LOCK    LCr_LOCK_(LC_ALL)
#define RES_NQUERYDOMAIN_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RES_NSEARCH_LOCK    LCr_LOCK_(LC_ALL)
#define RES_NSEARCH_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RES_NSEND_LOCK    LCr_LOCK_(LC_ALL)
#define RES_NSEND_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_MESSAGES
#  define RPMATCH_LOCK    LCr_LOCK_(LC_MESSAGES)
#  define RPMATCH_UNLOCK  LCr_UNLOCK_(LC_MESSAGES)
#else
#  define RPMATCH_LOCK    LCr_LOCK_(LC_ALL)
#  define RPMATCH_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define RUSEROK_LOCK    LCr_LOCK_(LC_ALL)
#define RUSEROK_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define RUSEROK_AF_LOCK    LCr_LOCK_(LC_ALL)
#define RUSEROK_AF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define SCANDIR_LOCK    TSE_TOGGLE_(LC_ALL)
#define SCANDIR_UNLOCK  TSE_UNTOGGLE_(LC_ALL)

#ifdef LC_NUMERIC
#  define SCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define SCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define SCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define SCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define SECURE_GETENV_LOCK    ENVr_LOCK_
#define SECURE_GETENV_UNLOCK  ENVr_UNLOCK_

/* seed48() has races with other threads concurrently executing any of itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(), mrand48(), nrand48(), or srand48() */
#define SEED48_LOCK    gwENVr_LOCK_
#define SEED48_UNLOCK  gwENVr_UNLOCK_

/* seed48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), or srand48_r() */
#define SEED48_R_LOCK    gwENVr_LOCK_
#define SEED48_R_UNLOCK  gwENVr_UNLOCK_

#define SETALIASENT_LOCK    LCr_LOCK_(LC_ALL)
#define SETALIASENT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* setcontext() has races with other threads concurrently executing any of itself, getcontext(), makecontext(), or swapcontext() */
#define SETCONTEXT_LOCK    gwENVr_LOCK_
#define SETCONTEXT_UNLOCK  gwENVr_UNLOCK_

#define SETENV_LOCK    ENVw_LOCK_
#define SETENV_UNLOCK  ENVw_UNLOCK_

/* setfsent() has races with other threads concurrently executing any of itself, endfsent(), getfsent(), getfsfile(), or getfsspec() */
#define SETFSENT_LOCK    gwENVr_LOCK_
#define SETFSENT_UNLOCK  gwENVr_UNLOCK_

/* setgrent() has races with other threads concurrently executing any of itself, endgrent(), getgrent(), or getgrent_r() */
#define SETGRENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define SETGRENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* sethostent() has races with other threads concurrently executing any of itself, endhostent(), gethostent(), or gethostent_r() */
#define SETHOSTENT_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define SETHOSTENT_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* sethostid() is unsuitable for a multi-threaded environment */

/* setkey() has races with other threads concurrently executing any of itself, crypt(), or encrypt() */
#define SETKEY_LOCK    gwENVr_LOCK_
#define SETKEY_UNLOCK  gwENVr_UNLOCK_

#define SETLOCALE_LOCK    ENVr_LCw_LOCK_(LC_ALL)
#define SETLOCALE_UNLOCK  ENVr_LCw_UNLOCK_(LC_ALL)

#define SETLOGMASK_LOCK    gwENVr_LOCK_
#define SETLOGMASK_UNLOCK  gwENVr_UNLOCK_

/* setnetent() has races with other threads concurrently executing any of itself, endnetent(), or getnetent() */
#define SETNETENT_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define SETNETENT_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

/* setnetgrent() has races with other threads concurrently executing any of itself, endnetgrent(), getnetgrent(), getnetgrent_r(), or innetgr() */
#define SETNETGRENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define SETNETGRENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* setprotoent() has races with other threads concurrently executing any of itself, endprotoent(), or getprotoent() */
#define SETPROTOENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define SETPROTOENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* setpwent() has races with other threads concurrently executing any of itself, endpwent(), getpwent(), or getpwent_r() */
#define SETPWENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define SETPWENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

#define SETRPCENT_LOCK    LCr_LOCK_(LC_ALL)
#define SETRPCENT_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* setservent() has races with other threads concurrently executing any of itself, endservent(), or getservent() */
#define SETSERVENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define SETSERVENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* setspent() has races with other threads concurrently executing any of itself, endspent(), getspent(), or getspent_r() */
#define SETSPENT_LOCK    gwLCr_LOCK_(LC_ALL)
#define SETSPENT_UNLOCK  gwLCr_UNLOCK_(LC_ALL)

/* setstate_r() has races with other threads concurrently executing any of itself, initstate_r(), random_r(), or srandom_r() */
#define SETSTATE_R_LOCK    gwENVr_LOCK_
#define SETSTATE_R_UNLOCK  gwENVr_UNLOCK_

/* setttyent() has races with other threads concurrently executing any of itself, endttyent(), getttyent(), or getttynam() */
#define SETTTYENT_LOCK    gwENVr_LOCK_
#define SETTTYENT_UNLOCK  gwENVr_UNLOCK_

/* setutent() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutxent(), utmpname(), or wordexp() */
#define SETUTENT_LOCK    gwENVr_LOCK_
#define SETUTENT_UNLOCK  gwENVr_UNLOCK_

/* setutxent() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), utmpname(), or wordexp() */
#define SETUTXENT_LOCK    gwENVr_LOCK_
#define SETUTXENT_UNLOCK  gwENVr_UNLOCK_

#define SGETSPENT_LOCK    gwENVr_LOCK_
#define SGETSPENT_UNLOCK  gwENVr_UNLOCK_

#define SGETSPENT_R_LOCK    LCr_LOCK_(LC_ALL)
#define SGETSPENT_R_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define SHM_OPEN_LOCK    LCr_LOCK_(LC_ALL)
#define SHM_OPEN_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define SHM_UNLINK_LOCK    LCr_LOCK_(LC_ALL)
#define SHM_UNLINK_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* siginterrupt() is unsuitable for a multi-threaded environment */

/* sleep() is vulnerable to signal SIGCHLD/linux */

#ifdef LC_NUMERIC
#  define SNPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define SNPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define SNPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define SNPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define SPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define SPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define SPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define SPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* srand48() has races with other threads concurrently executing any of itself, drand48(), erand48(), jrand48(), lcong48(), lrand48(), mrand48(), nrand48(), or seed48() */
#define SRAND48_LOCK    gwENVr_LOCK_
#define SRAND48_UNLOCK  gwENVr_UNLOCK_

/* srand48_r() has races with other threads concurrently executing any of itself, drand48_r(), erand48_r(), jrand48_r(), lcong48_r(), lrand48_r(), mrand48_r(), nrand48_r(), or seed48_r() */
#define SRAND48_R_LOCK    gwENVr_LOCK_
#define SRAND48_R_UNLOCK  gwENVr_UNLOCK_

/* srandom_r() has races with other threads concurrently executing any of itself, initstate_r(), random_r(), or setstate_r() */
#define SRANDOM_R_LOCK    gwENVr_LOCK_
#define SRANDOM_R_UNLOCK  gwENVr_UNLOCK_

#ifdef LC_NUMERIC
#  define SSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define SSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define SSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define SSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif


#ifdef LC_CTYPE
#  define STRCASECMP_LOCK    LCr_LOCK_(LC_CTYPE)
#  define STRCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define STRCASECMP_LOCK    LCr_LOCK_(LC_ALL)
#  define STRCASECMP_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define STRCASESTR_LOCK    LCr_LOCK_(LC_ALL)
#define STRCASESTR_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_COLLATE
#  define STRCOLL_LOCK    LCr_LOCK_(LC_COLLATE)
#  define STRCOLL_UNLOCK  LCr_UNLOCK_(LC_COLLATE)
#else
#  define STRCOLL_LOCK    LCr_LOCK_(LC_ALL)
#  define STRCOLL_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_MESSAGES
#  define STRERROR_LOCK    gwENVr_LCr_LOCK_(LC_MESSAGES)
#  define STRERROR_UNLOCK  gwENVr_LCr_UNLOCK_(LC_MESSAGES)
#else
#  define STRERROR_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#  define STRERROR_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_MESSAGES
#  define STRERROR_L_LOCK    TSE_TOGGLE_(LC_MESSAGES)
#  define STRERROR_L_UNLOCK  TSE_UNTOGGLE_(LC_MESSAGES)
#else
#  define STRERROR_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define STRERROR_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_MESSAGES
#  define STRERROR_R_LOCK    TSE_TOGGLE_(LC_MESSAGES)
#  define STRERROR_R_UNLOCK  TSE_UNTOGGLE_(LC_MESSAGES)
#else
#  define STRERROR_R_LOCK    TSE_TOGGLE_(LC_ALL)
#  define STRERROR_R_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_MONETARY
#  define STRFMON_LOCK    LCr_LOCK_(LC_MONETARY)
#  define STRFMON_UNLOCK  LCr_UNLOCK_(LC_MONETARY)
#else
#  define STRFMON_LOCK    LCr_LOCK_(LC_ALL)
#  define STRFMON_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_MONETARY
#  define STRFMON_L_LOCK    TSE_TOGGLE_(LC_MONETARY)
#  define STRFMON_L_UNLOCK  TSE_UNTOGGLE_(LC_MONETARY)
#else
#  define STRFMON_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define STRFMON_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define STRFROMD_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define STRFROMD_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define STRFROMD_LOCK    LCr_LOCK_(LC_ALL)
#  define STRFROMD_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define STRFROMF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define STRFROMF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define STRFROMF_LOCK    LCr_LOCK_(LC_ALL)
#  define STRFROMF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define STRFROML_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define STRFROML_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define STRFROML_LOCK    LCr_LOCK_(LC_ALL)
#  define STRFROML_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_TIME
#  define STRFTIME_LOCK    ENVr_LCr_LOCK_(LC_TIME)
#  define STRFTIME_UNLOCK  ENVr_LCr_UNLOCK_(LC_TIME)
#else
#  define STRFTIME_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#  define STRFTIME_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_TIME
#  define STRFTIME_L_LOCK    TSE_TOGGLE_(LC_TIME)
#  define STRFTIME_L_UNLOCK  TSE_UNTOGGLE_(LC_TIME)
#else
#  define STRFTIME_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define STRFTIME_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define STRNCASECMP_LOCK    LCr_LOCK_(LC_CTYPE)
#  define STRNCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define STRNCASECMP_LOCK    LCr_LOCK_(LC_ALL)
#  define STRNCASECMP_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_TIME
#  define STRPTIME_LOCK    ENVr_LCr_LOCK_(LC_TIME)
#  define STRPTIME_UNLOCK  ENVr_LCr_UNLOCK_(LC_TIME)
#else
#  define STRPTIME_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#  define STRPTIME_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_MESSAGES
#  define STRSIGNAL_LOCK    gwLCr_LOCK_(LC_MESSAGES)
#  define STRSIGNAL_UNLOCK  gwLCr_UNLOCK_(LC_MESSAGES)
#else
#  define STRSIGNAL_LOCK    gwLCr_LOCK_(LC_ALL)
#  define STRSIGNAL_UNLOCK  gwLCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define STRTOD_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define STRTOD_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define STRTOD_LOCK    LCr_LOCK_(LC_ALL)
#  define STRTOD_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define STRTOF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define STRTOF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define STRTOF_LOCK    LCr_LOCK_(LC_ALL)
#  define STRTOF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define STRTOIMAX_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOIMAX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define STRTOK_LOCK    gwENVr_LOCK_
#define STRTOK_UNLOCK  gwENVr_UNLOCK_

#define STRTOL_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define STRTOLD_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define STRTOLD_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define STRTOLD_LOCK    LCr_LOCK_(LC_ALL)
#  define STRTOLD_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define STRTOLL_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOLL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define STRTOQ_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOQ_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define STRTOUL_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOUL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define STRTOULL_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOULL_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define STRTOUMAX_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOUMAX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define STRTOUQ_LOCK    LCr_LOCK_(LC_ALL)
#define STRTOUQ_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_COLLATE
#  define STRVERSCMP_LOCK    TSE_TOGGLE_(LC_COLLATE)
#  define STRVERSCMP_UNLOCK  TSE_UNTOGGLE_(LC_COLLATE)
#else
#  define STRVERSCMP_LOCK    TSE_TOGGLE_(LC_ALL)
#  define STRVERSCMP_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_COLLATE
#  define STRXFRM_LOCK    LCr_LOCK_(LC_COLLATE)
#  define STRXFRM_UNLOCK  LCr_UNLOCK_(LC_COLLATE)
#else
#  define STRXFRM_LOCK    LCr_LOCK_(LC_ALL)
#  define STRXFRM_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* swapcontext() has races with other threads concurrently executing any of itself, getcontext(), makecontext(), or setcontext() */
#define SWAPCONTEXT_LOCK    gwENVr_LOCK_
#define SWAPCONTEXT_UNLOCK  gwENVr_UNLOCK_

#define SWPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define SWPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define SWSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define SWSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define SWSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define SWSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define SYSCONF_LOCK    ENVr_LOCK_
#define SYSCONF_UNLOCK  ENVr_UNLOCK_

#define SYSLOG_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define SYSLOG_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

/* tdelete() has races with other threads concurrently executing any of itself, tfind(), or tsearch() */
#define TDELETE_LOCK    gwENVr_LOCK_
#define TDELETE_UNLOCK  gwENVr_UNLOCK_

#define TEMPNAM_LOCK    ENVr_LOCK_
#define TEMPNAM_UNLOCK  ENVr_UNLOCK_

/* tfind() has races with other threads concurrently executing any of itself, tdelete(), or tsearch() */
#define TFIND_LOCK    gwENVr_LOCK_
#define TFIND_UNLOCK  gwENVr_UNLOCK_

#define TIMEGM_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define TIMEGM_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define TIMELOCAL_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define TIMELOCAL_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

/* tmpnam() macros only valid if !s */

#ifdef LC_CTYPE
#  define TOLOWER_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOLOWER_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOLOWER_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOLOWER_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOLOWER_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOLOWER_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOLOWER_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOLOWER_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOUPPER_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOUPPER_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOUPPER_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOUPPER_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOUPPER_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOUPPER_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOUPPER_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOUPPER_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOWCTRANS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOWCTRANS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOWCTRANS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOWCTRANS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOWLOWER_LOCK    LCr_LOCK_(LC_CTYPE)
#  define TOWLOWER_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define TOWLOWER_LOCK    LCr_LOCK_(LC_ALL)
#  define TOWLOWER_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOWLOWER_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOWLOWER_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOWLOWER_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOWLOWER_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOWUPPER_LOCK    LCr_LOCK_(LC_CTYPE)
#  define TOWUPPER_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define TOWUPPER_LOCK    LCr_LOCK_(LC_ALL)
#  define TOWUPPER_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define TOWUPPER_L_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define TOWUPPER_L_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define TOWUPPER_L_LOCK    TSE_TOGGLE_(LC_ALL)
#  define TOWUPPER_L_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* tsearch() has races with other threads concurrently executing any of itself, tdelete(), or tfind() */
#define TSEARCH_LOCK    gwENVr_LOCK_
#define TSEARCH_UNLOCK  gwENVr_UNLOCK_

/* ttyname() has races with other threads concurrently executing any of itself, or login_tty() */
#define TTYNAME_LOCK    gwENVr_LOCK_
#define TTYNAME_UNLOCK  gwENVr_UNLOCK_

/* twalk() has races with other threads concurrently executing any of itself, or twalk_r() */
#define TWALK_LOCK    gwENVr_LOCK_
#define TWALK_UNLOCK  gwENVr_UNLOCK_

/* twalk_r() has races with other threads concurrently executing any of itself, or twalk() */
#define TWALK_R_LOCK    gwENVr_LOCK_
#define TWALK_R_UNLOCK  gwENVr_UNLOCK_

#define TZSET_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#define TZSET_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)

#define UNSETENV_LOCK    ENVw_LOCK_
#define UNSETENV_UNLOCK  ENVw_UNLOCK_

/* updwtmp() is vulnerable to signal ALRM */

/* utmpname() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), or wordexp() */
#define UTMPNAME_LOCK    gwENVr_LOCK_
#define UTMPNAME_UNLOCK  gwENVr_UNLOCK_

#define VA_ARG_LOCK    gwENVr_LOCK_
#define VA_ARG_UNLOCK  gwENVr_UNLOCK_

/* valloc() must be called at least once in single-threaded mode
 *      to enable any semblance of thread-safety in subsequent calls.
 */

#define VASPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define VASPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define VDPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VDPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VDPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define VDPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define VERR_LOCK    LCr_LOCK_(LC_ALL)
#define VERR_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define VERRX_LOCK    LCr_LOCK_(LC_ALL)
#define VERRX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define VERSIONSORT_LOCK    LCr_LOCK_(LC_ALL)
#define VERSIONSORT_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define VFPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VFPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VFPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define VFPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define VFSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VFSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VFSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define VFSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define VFWPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define VFWPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define VPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define VPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define VSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define VSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define VSNPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VSNPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VSNPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define VSNPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define VSPRINTF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VSPRINTF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VSPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#  define VSPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define VSSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define VSSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define VSSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define VSSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define VSWPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define VSWPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define VSYSLOG_LOCK    ENVr_LCr_LOCK_(LC_ALL)
#define VSYSLOG_UNLOCK  ENVr_LCr_UNLOCK_(LC_ALL)

#define VWARN_LOCK    LCr_LOCK_(LC_ALL)
#define VWARN_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define VWARNX_LOCK    LCr_LOCK_(LC_ALL)
#define VWARNX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define VWPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define VWPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define WARN_LOCK    LCr_LOCK_(LC_ALL)
#define WARN_UNLOCK  LCr_UNLOCK_(LC_ALL)

#define WARNX_LOCK    LCr_LOCK_(LC_ALL)
#define WARNX_UNLOCK  LCr_UNLOCK_(LC_ALL)

/* wcrtomb() macros only valid if !ps */
#ifdef LC_CTYPE
#  define WCRTOMB_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCRTOMB_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCRTOMB_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCRTOMB_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCSCASECMP_LOCK    LCr_LOCK_(LC_CTYPE)
#  define WCSCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCSCASECMP_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSCASECMP_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCSCHR_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCSCHR_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCSCHR_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCSCHR_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_COLLATE
#  define WCSCOLL_LOCK    LCr_LOCK_(LC_COLLATE)
#  define WCSCOLL_UNLOCK  LCr_UNLOCK_(LC_COLLATE)
#else
#  define WCSCOLL_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSCOLL_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define WCSFTIME_LOCK    TSE_TOGGLE_(LC_ALL)
#define WCSFTIME_UNLOCK  TSE_UNTOGGLE_(LC_ALL)

#ifdef LC_CTYPE
#  define WCSNCASECMP_LOCK    LCr_LOCK_(LC_CTYPE)
#  define WCSNCASECMP_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCSNCASECMP_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSNCASECMP_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* wcsnrtombs() macros only valid if !ps */
#ifdef LC_CTYPE
#  define WCSNRTOMBS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCSNRTOMBS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCSNRTOMBS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCSNRTOMBS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCSRCHR_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCSRCHR_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCSRCHR_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCSRCHR_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

/* wcsrtombs() macros only valid if !ps */
#ifdef LC_CTYPE
#  define WCSRTOMBS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCSRTOMBS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCSRTOMBS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCSRTOMBS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define WCSTOD_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define WCSTOD_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define WCSTOD_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSTOD_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_NUMERIC
#  define WCSTOF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define WCSTOF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define WCSTOF_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSTOF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#define WCSTOIMAX_LOCK    LCr_LOCK_(LC_ALL)
#define WCSTOIMAX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define WCSTOLD_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define WCSTOLD_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define WCSTOLD_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSTOLD_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCSTOMBS_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCSTOMBS_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCSTOMBS_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCSTOMBS_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#define WCSTOUMAX_LOCK    LCr_LOCK_(LC_ALL)
#define WCSTOUMAX_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_CTYPE
#  define WCSWIDTH_LOCK    LCr_LOCK_(LC_CTYPE)
#  define WCSWIDTH_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCSWIDTH_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSWIDTH_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_COLLATE
#  define WCSXFRM_LOCK    LCr_LOCK_(LC_COLLATE)
#  define WCSXFRM_UNLOCK  LCr_UNLOCK_(LC_COLLATE)
#else
#  define WCSXFRM_LOCK    LCr_LOCK_(LC_ALL)
#  define WCSXFRM_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCTOB_LOCK    TSE_TOGGLE_(LC_CTYPE)
#  define WCTOB_UNLOCK  TSE_UNTOGGLE_(LC_CTYPE)
#else
#  define WCTOB_LOCK    TSE_TOGGLE_(LC_ALL)
#  define WCTOB_UNLOCK  TSE_UNTOGGLE_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCTOMB_LOCK    gwENVr_LCr_LOCK_(LC_CTYPE)
#  define WCTOMB_UNLOCK  gwENVr_LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCTOMB_LOCK    gwENVr_LCr_LOCK_(LC_ALL)
#  define WCTOMB_UNLOCK  gwENVr_LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCTRANS_LOCK    LCr_LOCK_(LC_CTYPE)
#  define WCTRANS_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCTRANS_LOCK    LCr_LOCK_(LC_ALL)
#  define WCTRANS_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCTYPE_LOCK    LCr_LOCK_(LC_CTYPE)
#  define WCTYPE_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCTYPE_LOCK    LCr_LOCK_(LC_ALL)
#  define WCTYPE_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

#ifdef LC_CTYPE
#  define WCWIDTH_LOCK    LCr_LOCK_(LC_CTYPE)
#  define WCWIDTH_UNLOCK  LCr_UNLOCK_(LC_CTYPE)
#else
#  define WCWIDTH_LOCK    LCr_LOCK_(LC_ALL)
#  define WCWIDTH_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* wordexp() is vulnerable to signal ALRM
 * wordexp() has races with other threads concurrently executing any of itself, endutent(), endutxent(), getlogin(), getlogin_r(), getutent(), getutid(), getutline(), getutxent(), getutxid(), glob(), login(), logout(), pututline(), pututxline(), setutent(), setutxent(), or utmpname()
 */
#define WORDEXP_LOCK    gwENVw_LCr_LOCK_(LC_ALL)
#define WORDEXP_UNLOCK  gwENVw_LCr_UNLOCK_(LC_ALL)

#define WPRINTF_LOCK    LCr_LOCK_(LC_ALL)
#define WPRINTF_UNLOCK  LCr_UNLOCK_(LC_ALL)

#ifdef LC_NUMERIC
#  define WSCANF_LOCK    LCr_LOCK_(LC_NUMERIC)
#  define WSCANF_UNLOCK  LCr_UNLOCK_(LC_NUMERIC)
#else
#  define WSCANF_LOCK    LCr_LOCK_(LC_ALL)
#  define WSCANF_UNLOCK  LCr_UNLOCK_(LC_ALL)
#endif

/* ex: set ro ft=c: */
